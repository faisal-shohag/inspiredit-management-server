generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String    @id @default(uuid())
  name               String?
  email              String    @unique
  phone              String?
  password           String
  created_at         DateTime  @default(now())
  info               Boolean   @default(false)
  inst_address       String?
  inst_eiin          String?
  inst_email         String?
  inst_founding_date DateTime?
  inst_image         String?
  inst_name          String?
  inst_phone         String?
  staff_img_size     Int       @default(500)
  student_img_size   Int       @default(500)
  teacher_img_size   Int       @default(500)
}

model Teacher {
  id                Int                  @id @default(autoincrement())
  uuid              String               @default(uuid())
  name              String
  email             String               @unique
  phone             String
  password          String?
  present_address   String?
  joining_date      String
  fixed_salary      Int                  @default(0)
  nid               String?
  image             String?
  gender            String?
  designation       String?
  department        String
  date_of_birth     String?
  education         String?
  blood_group       String?
  created_at        DateTime             @default(now())
  isLeave           Boolean              @default(false)
  parmanent_address String?
  id_no             String                  @unique
  classes           ClassesAndTeachers[]
  subjects          Subject[]
  attendance        TeacherAttendence[]
  salary            Salary[]
}

model ClassesAndTeachers {
  teacherId  Int
  classId    Int
  created_at DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([teacherId, classId])
}

model Class {
  id         Int                  @id @default(autoincrement())
  name       String?              @unique
  created_at DateTime             @default(now())
  fee        Float                @default(0)
  teachers   ClassesAndTeachers[]
  sections   Section[]
  student    Student[]
  attendance StudentAttendance[]
  subject    Subject[]
}

model Subject {
  name      String
  mark      Int     @default(0)
  classId   Int
  teacherId Int
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([classId, teacherId])
}

model Student {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @default(uuid())
  email                String              @unique
  phone                String?
  password             String
  present_address      String
  permanent_address    String
  parent_name          String
  parent_phone         String
  local_guardian       String?
  local_guardian_phone String?
  group                String?
  session              String?
  id_no                String                 @unique
  image                String?
  gender               String
  date_of_birth        String
  blood_group          String?
  admission_date       DateTime?     @default(now())
  created_at           DateTime            @default(now())
  classId              Int
  sectionId            Int?
  birth_certificate_no String
  name                 String
  admissionFee         AdmissionFee[]
  regularFee           RegularFee[]
  class                Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  section              Section?            @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  attendance           StudentAttendance[]
}

model AdmissionFee {
  id             Int      @id @default(autoincrement())
  fee            Float    @default(0)
  discount       Float    @default(0)
  collectionDate DateTime @default(now())
  studentId      Int
  other          Float    @default(0)
  readmission    Boolean  @default(false)
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  transaction    Transactions[]
}

model RegularFee {
  id             Int      @id @default(autoincrement())
  fine           Float    @default(0)
  studentId      Int
  collectionDate DateTime @default(now())
  books_fee      Float    @default(0)
  discount_fee   Float    @default(0)
  id_card_fee    Float    @default(0)
  others_fee     Float    @default(0)
  regular_fee    Float
  transport_fee  Float    @default(0)
  uniform_fee    Float    @default(0)
  due            Float    @default(0)
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  transaction    Transactions[]
}

model Section {
  id         Int                 @id @default(autoincrement())
  name       String?
  classId    Int
  class      Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  student    Student[]
  attendence StudentAttendance[]
}

model StudentAttendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   Int
  sectionId Int?
  isPresent Boolean
  date      DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model TeacherAttendence {
  id        Int      @id @default(autoincrement())
  teacherId Int
  isPresent Boolean
  date      DateTime @default(now())
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model StaffAttendance {
  id        Int      @id @default(autoincrement())
  staffId   Int
  isPresent Boolean
  date      DateTime @default(now())
  satff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Staff {
  id                Int               @id @default(autoincrement())
  uuid              String            @default(uuid())
  email             String            @unique
  phone             String?
  password          String
  present_address   String?
  permanent_address String?
  joining_date      String
  fixed_salary      Int
  nid               String?
  image             String?
  gender            String?
  designation       String?
  department        String
  date_of_birth     String
  education         String
  blood_group       String?
  created_at        DateTime          @default(now())
  id_no             String               @unique
  name              String
  attendance        StaffAttendance[]
  salary            Salary[]

}

model Salary {
   id             Int      @id @default(autoincrement())
  monthly_salary Int      @default(0)
  bonus          Int?      @default(0)
  teacherId      Int?
  paid_date      DateTime @default(now())
  teacher        Teacher?  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  staff          Staff?   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId        Int?
  transaction Transactions[]
}

// model TeacherSalary {
//   id             Int      @id @default(autoincrement())
//   monthly_salary Int      @default(0)
//   bonus          Int      @default(0)
//   teacherId      Int
//   paid_date      DateTime @default(now())
//   teacher        Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
// }

// model StaffSalary {
//   id             Int      @id @default(autoincrement())
//   monthly_salary Int      @default(0)
//   bonus          Int      @default(0)
//   staffId        Int
//   paid_date      DateTime @default(now())
//   staff          Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
// }

model Settings {
  id            Int     @id @default(autoincrement())
  name          String?
  phone         String?
  address       String?
  email         String?
  founding_date String?
  eiin          String?
  image         String?
}

model Account {
  id               Int      @id @default(autoincrement())
  type             String?
  date             DateTime @default(now())
  amount           Int
  check_number     String?
  purpose          String?
  transaction_type String?
  transaction Transactions[]
}

model Transactions {
  id     Int      @id @default(autoincrement())
  amount Float    @default(0)
  date   DateTime @default(now())
  name   String
  type   String
  accountId Int? 
  salaryId Int?
  admissionFeeId Int?
  regularFeeId Int?
  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  salary Salary? @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  admissionFee AdmissionFee? @relation(fields: [admissionFeeId], references: [id], onDelete: Cascade)
  regularFee RegularFee? @relation(fields: [regularFeeId], references: [id], onDelete: Cascade)
}
